function Get-Architecture
{
	[CmdletBinding()]
	[OutputType([int])]
	Param
	(
		[Parameter(Mandatory = $true,
				   ValueFromPipelineByPropertyName = $false,
				   Position = 0)]
		$Servers
		
		
	)
	
	Process
	{
		try
		{
			$serverarch_obj = @()
			
			foreach ($server in $servers)
			{
				
				# CIM stuff
				$objOption = New-CimSessionOption -Protocol Dcom -ErrorAction SilentlyContinue
				$objSession = New-CimSession -ComputerName $server -SessionOption $objOption -ErrorAction SilentlyContinue
				
				$WinOS = Get-CimInstance -CimSession $objSession -Namespace ROOT/cimv2 -ClassName Win32_OperatingSystem -ErrorAction SilentlyContinue
				$Model = (Get-CimInstance -CimSession $objSession -Namespace ROOT/cimv2 -ClassName Win32_ComputerSystem -ErrorAction SilentlyContinue ).Model
				$IP = (Get-CimInstance -CimSession $objSession -Namespace ROOT/cimv2 -ClassName Win32_NetworkAdapterConfiguration -ErrorAction SilentlyContinue | 
                    where { $_.ipaddress -like "1*" } | select -ExpandProperty ipaddress | select -First 1 -ErrorAction SilentlyContinue)
				$CPU = Get-CimInstance -CimSession $objSession -Namespace ROOT/cimv2 -ClassName Win32_Processor -ErrorAction SilentlyContinue
				
				
				$params = @{
					'ServerName' = $server
					'Architecture' = $WinOS.OSArchitecture
					'Operating System' = $WinOS.Caption
					'Model' = $Model
					'CPU' = ($CPU.Name | Select-Object -First 1)
					'IP' = $IP
					'RAM' = ([math]::round($WinOS.TotalVisibleMemorySize/1MB)).ToString() + ' GB'
					'Cores' = ($CPU.NumberOfCores).count
					'LogicalProcessors' = ($CPU.NumberOfLogicalProcessors).Count
					
					
				}
				
				$allDisks = Get-CimInstance -CimSession $objSession -Namespace ROOT/cimv2 -ClassName Win32_Volume -ErrorAction SilentlyContinue |
                     select driveletter, capacity
				
				foreach ($disk in $alldisks)
				{
					$DisksizeGB = [math]::round($disk.capacity/1GB)
					$diskLetter = $disk.Driveletter.Replace(':', '')
					$params.Add($("$diskLetter Drive"), $("$disksizeGB GB"))
					
				}
				
				# Create objects
				$objresult = New-Object psobject -Property $params
				
				# Add object to result
				$serverarch_obj += $objresult
				
			}
			
		}
		catch [System.Net.WebException], [System.Exception]
		{
			$errorMessage = $_.Exception.Message
            Write-Warning -Message $errorMessage
		}
		finally
		{
			$serverarch_obj
		}
	}
	
}
